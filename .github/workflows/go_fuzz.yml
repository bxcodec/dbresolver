name: Go Fuzz

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'
  workflow_dispatch:

concurrency:
  group: go_fuzz
  cancel-in-progress: true

env:
  GOCACHE: /tmp/go/gocache
  GOBIN: ${{ github.workspace }}/bin
#  PATH: "${{ env.GOBIN }}:$PATH"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.20.3
          check-latest: true
          cache-dependency-path: go.sum
          cache: true
#          go-version-file: go.mod

      - name: Cache Go
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.GOCACHE }}
            ${{ env.GOBIN }}
          key: ${{ runner.os }}-go-${{ hashFiles('*.go') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('*.go') }}

      - name: Build
        timeout-minutes: 2
        run: |
          go build -v
          #export PATH=${{ env.GOBIN }}:$PATH
          go env -w GOBIN=${{ env.GOBIN }}
          echo "${{ env.GOBIN }}" >> $GITHUB_PATH

      - name: Install Test Deps
        run: |
          go install github.com/mfridman/tparse@latest
          go install gotest.tools/gotestsum@latest
          tparse

  fuzz-multiwrite:
    needs: [ build ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Fuzz MultiWrite Short
        run: |
          go test -short -fuzz=FuzzMultiWrite -fuzztime=12m -timeout=15m -cover -covermode=count -run="^$" -json | \
          tparse -follow -all -sort=elapsed

      - name: Fuzz MultiWrite
        run: |
          go test -fuzz=FuzzMultiWrite -fuzztime=12m -timeout=15m -cover -covermode=count -run="^$" -json | \
          tparse -follow -all -sort=elapsed


  fuzz:
    needs: [ build ] #will fail if more than 1 fuzz function is present
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Fuzz Short
        run: |
          #          go test -fuzz=Fuzz -short -v -fuzztime=5m -timeout=15m -cover  -run="Fuzz*"
          go test -fuzz=Fuzz -fuzztime=12m -timeout=15m -cover -covermode=count -run="Fuzz*" -json | \
          tparse -follow -all -sort=elapsed



  race-fuzz:
    runs-on: ubuntu-latest
    needs: [ fuzz ]

    steps:
      - uses: actions/checkout@v3

      - name: Race Short Fuzz
        continue-on-error: true
        run: |
          go test -fuzz=Fuzz -short -race -v -fuzztime=5m -timeout=15m -cover -covermode=count -run="Fuzz*"

      - name: Fuzz normalize
        if: ${{ failure() }}
        uses: nick-fields/retry@v2
        with:
          max_attempts: 10
          retry_on: error
          timeout_minutes: 360m
          #working-directory: ${{ github.workspace }}
          command: |
            echo "go fuzz intensive failed"
